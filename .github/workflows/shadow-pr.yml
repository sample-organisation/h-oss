on:
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  open-pr:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.pull_request.head.ref, 'from_pro') != true }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Debug Action
        uses: hmarr/debug-action@v1.0.0

      - name: Get all commits of pull request
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_TOKEN}}
          script: |
            const pullRequestNumber = context.payload.number;
            console.log(pullRequestNumber);
            
            const commits = await github.pulls.listCommits({
              owner: 'sample-organisation',
              repo: 'h-oss',
              pull_number: pullRequestNumber
            });
            
            if (commits.status != 200) {
              core.setFailed('API request to get commits of pull request returned non-success status code ' + commits.status);
              return;
            }
            
            let authors = commits.data.map(function(c) { return `${commit.author.name} <${commit.author.email}>`; });
            authors = Array.from(new Set(authors));
            authors = authors.join(',');
            console.log('authors', authors);
            core.exportVariable('ALL_COMMIT_AUTHORS', authors);
            console.log(JSON.stringify(commits.data, null, 4)); 

      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      
      - name: "Shadow pull request"
        env:
          PR_NUMBER: ${{ github.event.number }}
          GH_USERNAME: scriptnull
          GH_CREDS: $GH_USERNAME:${{ secrets.GH_TOKEN }}
          GH_SSH_KEY: ${{ secrets.SSH_KEY }}
          GH_BASE_REPO_HEAD_SHA: ${{ github.event.pull_request.base.sha }}
        run: |
          echo "PR NUMBER is $PR_NUMBER"
          
          touch .git-credentials
          echo "https://$GH_CREDS@api.github.com" >> .git-credentials
          echo "https://$GH_CREDS@github.com" >> .git-credentials
          
          mkdir .ssh
          echo "$GH_SSH_KEY" | tr -d '\r' > .ssh/id_rsa
          chmod 400 .ssh/id_rsa
          ssh-keyscan -t rsa github.com > .ssh/known_hosts
          
          echo "home is $HOME"
          echo "pwd is $PWD"
          
          cp .git-credentials $HOME/.git-credentials
          
          git clone --bare https://$GH_CREDS@github.com/sample-organisation/h-pro.git
          pushd h-pro.git
          LAST_REV=$(git log --grep="^GitOrigin-RevId:" -n 1  | grep "GitOrigin-RevId:" | sed 's/    GitOrigin-RevId: //g')
          popd
          echo "last rev is $LAST_REV"
          
          echo "GH_BASE_REPO_HEAD_SHA is $GH_BASE_REPO_HEAD_SHA"
          
          cp pr.copy.bara.sky copy.bara.sky
          
          echo "ALL_COMMIT_AUTHORS is $ALL_COMMIT_AUTHORS"

          docker run --rm \
            -v ${PWD}/.git-credentials:/root/.git-credentials \
            -v ${PWD}/bot.gitconfig:/root/.gitconfig \
            -v ${PWD}/.ssh:/root/.ssh \
            -v ${PWD}:/usr/src/app \
            --env COPYBARA_CONFIG=copy.bara.sky \
            --env COPYBARA_SUBCOMMAND=migrate \
            --env COPYBARA_OPTIONS="--ignore-noop --last-rev $GH_BASE_REPO_HEAD_SHA" \
            --env COPYBARA_WORKFLOW=default \
            --env COPYBARA_SOURCEREF=$PR_NUMBER \
            ghcr.io/scriptnull/copybara:latest copybara
